----------------------------------------------------------------------
学籍番号: 200904321
名前: 青木大祐
課題番号：1
練習問題番号：105
題名：プログラミングとデバッグ

以下のCプログラムを作成し、バブルソートとコムソートの比較を行った。

#include<stdio.h>

void
print_data(int data[], int count)
{
	int             i;

	for (i = 0; i < count; ++i)
	{
		printf("%2d\t", data[i]);
	}
}

void
swap(int data[], int i, int j)
{
	int             tmp;

	tmp = data[i];
	data[i] = data[j];
	data[j] = tmp;
}

void
bobble_sort(int data[], int count)
{
	int             i, j;
	int             n_loop = 0;
	int             n_swap = 0;

	for (i = 0; i < count - 1; ++i)
	{
		print_data(data, 10);
		++n_loop;
		for (j = 0; j < (count - 1) - i; ++j)
		{

			if (data[j] > data[j + 1])
			{
				printf("%s", "swap!");
				++n_swap;
				swap(data, j, j + 1);
			}

		}
		printf("\n");
	}

	printf("[bobble sort]\n loop: %d time(s), swap: %d time(s)\n\n", n_loop, n_swap);
}

void
comb_sort(int data[], int count)
{
	int             h = count * 10 / 13;
	int             i;

	int             n_loop = 0;
	int             n_swap = 0;

	if (h == 9 || h == 10)
	{
		h = 11;
	}

	while (1)
	{
		print_data(data, 10);
		int             flag = 0;
		++n_loop;
		for (i = 0; i + h < count; ++i)
		{

			if (data[i] > data[i + h])
			{
				printf("%s", "swap!");
				swap(data, i, i + h);
				++n_swap;
				++flag;
			}
		}

		if (h == 1)
		{
			if (flag == 0)
			{
				printf("\n");
				break;
			}
		}
		else
		{
			h = h * 10 / 13;
			if (h == 9 || h == 10)
			{
				h = 11;
			}
		}
		printf("\n");
	}
	printf("[comb sort]\n loop: %d time(s), swap: %d time(s)\n", n_loop, n_swap);
}

int
main()
{

	int             sample[10] = {8, 10, 3, 5, 7, 4, 2, 9, 6, 1};
	int             sample2[10] = {8, 10, 3, 5, 7, 4, 2, 9, 6, 1};

	bobble_sort(sample, 10);
	comb_sort(sample2, 10);
	return 1;
}


* 実行結果

 % ./a.out  
 8	10	 3	 5	 7	 4	 2	 9	 6	 1	swap!swap!swap!swap!swap!swap!swap!swap!
 8	 3	 5	 7	 4	 2	 9	 6	 1	10	swap!swap!swap!swap!swap!swap!swap!
 3	 5	 7	 4	 2	 8	 6	 1	 9	10	swap!swap!swap!swap!
 3	 5	 4	 2	 7	 6	 1	 8	 9	10	swap!swap!swap!swap!
 3	 4	 2	 5	 6	 1	 7	 8	 9	10	swap!swap!
 3	 2	 4	 5	 1	 6	 7	 8	 9	10	swap!swap!
 2	 3	 4	 1	 5	 6	 7	 8	 9	10	swap!
 2	 3	 1	 4	 5	 6	 7	 8	 9	10	swap!
 2	 1	 3	 4	 5	 6	 7	 8	 9	10	swap!
[bobble sort]
 loop: 9 time(s), swap: 30 time(s)

 8	10	 3	 5	 7	 4	 2	 9	 6	 1	swap!swap!
 8	 6	 1	 5	 7	 4	 2	 9	10	 3	swap!swap!swap!
 4	 2	 1	 5	 3	 8	 6	 9	10	 7	
 4	 2	 1	 5	 3	 8	 6	 9	10	 7	swap!swap!swap!
 1	 2	 3	 5	 4	 8	 6	 7	10	 9	swap!swap!swap!swap!
 1	 2	 3	 4	 5	 6	 7	 8	 9	10	
[comb sort]
 loop: 6 time(s), swap: 12 time(s)

* 考察

バブルソートを改良したコムソートの方が、反復回数、置換回数ともに少ない事がわかった。
